# 1.
name: Android Build

# 2.
on:
  pull_request:
    branches:
      - main
      - dev
  push:
    branches:
      - main
      - dev
  workflow_dispatch:  # Allow manual triggering
    inputs:
      url:
        description: 'Website URL to load in WebView'
        required: false
        default: 'https://flutter.dev'
      app_name:
        description: 'Application display name'
        required: false
        default: 'WebView App'
      build_id:
        description: 'Build ID for tracking in Firestore'
        required: false
        default: ''
  repository_dispatch:
    types: [build-android-request]

# 3.
jobs:
  build-android:
    runs-on: ubuntu-latest  # Ubuntu is sufficient for Android builds

    # 4.
    steps:
      # 5.
      - name: Clone repository
        uses: actions/checkout@v4

      # 6.
      - name: Setup java
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: "17.x"  # Updated to a more stable JDK version

      # 7.
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          flutter-version: '3.29.2'
          cache: true  # Enable Flutter cache for faster builds

      # 8.
      - name: Get Flutter packages
        run: |
          flutter pub get

      # 11.
      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # 12.
      - name: Build Android APK and App Bundle
        run: |
          flutter clean
          
          # Use input values if provided through workflow_dispatch, otherwise use values from repository_dispatch or defaults
          APP_NAME="${{ github.event.inputs.app_name || github.event.client_payload.app_name || 'WebView App' }}"
          WEBVIEW_URL="${{ github.event.inputs.url || github.event.client_payload.url || 'https://flutter.dev' }}"
          BUILD_ID="${{ github.event.inputs.build_id || github.event.client_payload.build_id || '' }}"
          
          echo "Building with APP_NAME: $APP_NAME"
          echo "Building with WEBVIEW_URL: $WEBVIEW_URL"
         
          
          # Escape special characters in APP_NAME for sed
          ESCAPED_APP_NAME=$(echo "$APP_NAME" | sed 's/[\/&]/\\&/g')
          
          # Update app name in strings.xml
          sed -i "s/<string name=\"app_name\">.*<\/string>/<string name=\"app_name\">$ESCAPED_APP_NAME<\/string>/g" android/app/src/main/res/values/strings.xml
          
          echo "Building APK..."
          flutter build apk --release \
            --dart-define=APP_NAME="$APP_NAME" \
            --dart-define=WEBVIEW_URL="$WEBVIEW_URL"
          
          echo "Building App Bundle (AAB)..."
          flutter build appbundle --release \
            --dart-define=APP_NAME="$APP_NAME" \
            --dart-define=WEBVIEW_URL="$WEBVIEW_URL"
        shell: bash

      # 13.
      - name: Upload APK Artifact
        uses: actions/upload-artifact@v4
        with:
          name: android-apk
          path: build/app/outputs/flutter-apk/app-release.apk
          retention-days: 7  # Keep artifacts for 7 days

      # 14.
      - name: Upload AAB Artifact
        uses: actions/upload-artifact@v4
        with:
          name: android-aab
          path: build/app/outputs/bundle/release/app-release.aab
          retention-days: 7  # Keep artifacts for 7 days
          
      # # 15. Update Firestore build status (if build_id is provided)
      # - name: Update build status in Firestore
      #   if: ${{ github.event.inputs.build_id != '' || github.event.client_payload.build_id != '' }}
      #   env:
      #     FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
      #     FIREBASE_SERVICE_ACCOUNT_BASE64: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_BASE64 }}
      #     BUILD_ID: ${{ github.event.inputs.build_id || github.event.client_payload.build_id }}
      #   run: |
      #     # Save Firebase service account JSON
      #     echo "$FIREBASE_SERVICE_ACCOUNT_BASE64" | base64 -d > /tmp/firebase-service-account.json
          
      #     # Install Firebase CLI
      #     npm install -g firebase-tools
          
      #     # Update Firestore document
      #     firebase --project $FIREBASE_PROJECT_ID firestore:update builds/$BUILD_ID --json \
      #       '{"status": "completed", "completedAt": "'$(date -u +"%Y-%m-%dT%H:%M:%SZ")'", "artifactUrls": {"apk": "'$GITHUB_SERVER_URL'/'$GITHUB_REPOSITORY'/actions/runs/'$GITHUB_RUN_ID'", "aab": "'$GITHUB_SERVER_URL'/'$GITHUB_REPOSITORY'/actions/runs/'$GITHUB_RUN_ID'"}}' \
      #       --service-account /tmp/firebase-service-account.json
          
      #     # Clean up
      #     rm /tmp/firebase-service-account.json