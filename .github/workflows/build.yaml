name: Android Build

on:
  pull_request:
    branches: [main, dev]
  push:
    branches: [main, dev]
  workflow_dispatch:
    inputs:
      url:
        description: 'Website URL to load in WebView'
        required: false
        default: 'https://flutter.dev'
      app_name:
        description: 'Application display name'
        required: false
        default: 'WebView App'
      build_id:
        description: 'Build ID for tracking in Firestore'
        required: false
        default: ''
  repository_dispatch:
    types: [build-android-request]

jobs:
  build-android:
    runs-on: ubuntu-latest
    env:
      FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
      BUILD_ID: ${{ github.event.inputs.build_id || github.event.client_payload.build_id || github.run_id }}

    steps:
      - name: Clone repository
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: "17.x"

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          flutter-version: '3.29.2'
          cache: true

      - name: Get Flutter packages
        run: flutter pub get

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}

      - name: Build Android APK and App Bundle
        run: |
          flutter clean
          
          APP_NAME="${{ github.event.inputs.app_name || github.event.client_payload.app_name || 'WebView App' }}"
          WEBVIEW_URL="${{ github.event.inputs.url || github.event.client_payload.url || 'https://flutter.dev' }}"
          
          echo "Building with APP_NAME: $APP_NAME"
          echo "Building with WEBVIEW_URL: $WEBVIEW_URL"
         
          ESCAPED_APP_NAME=$(echo "$APP_NAME" | sed 's/[\/&]/\\&/g')
          sed -i "s/<string name=\"app_name\">.*<\/string>/<string name=\"app_name\">$ESCAPED_APP_NAME<\/string>/g" android/app/src/main/res/values/strings.xml
          
          flutter build apk --release \
            --dart-define=APP_NAME="$APP_NAME" \
            --dart-define=WEBVIEW_URL="$WEBVIEW_URL"
          
          flutter build appbundle --release \
            --dart-define=APP_NAME="$APP_NAME" \
            --dart-define=WEBVIEW_URL="$WEBVIEW_URL"

      # Install Firebase CLI
      - name: Install Firebase CLI
        run: npm install -g firebase-tools

      # Authenticate with Firebase using the FIREBASE_TOKEN secret
      - name: Authenticate with Firebase
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
        run: firebase use --add ${{ secrets.FIREBASE_PROJECT_ID }}
        
      # Upload APK and AAB to Firebase Storage
      - name: Upload to Firebase Storage
        if: success()
        run: |
          # Create build path
          BUILD_PATH="builds/$BUILD_ID"
          echo "Uploading artifacts to $BUILD_PATH..."
          
          # Use Firebase Storage syntax to upload files
          firebase storage:upload build/app/outputs/flutter-apk/app-release.apk gs://$FIREBASE_PROJECT_ID.appspot.com/$BUILD_PATH/app.apk
          firebase storage:upload build/app/outputs/bundle/release/app-release.aab gs://$FIREBASE_PROJECT_ID.appspot.com/$BUILD_PATH/app.aab
          
          # Set public URLs
          echo "APK_URL=https://storage.googleapis.com/$FIREBASE_PROJECT_ID.appspot.com/$BUILD_PATH/app.apk" >> $GITHUB_ENV
          echo "AAB_URL=https://storage.googleapis.com/$FIREBASE_PROJECT_ID.appspot.com/$BUILD_PATH/app.aab" >> $GITHUB_ENV
          echo "BUILD_PATH=$BUILD_PATH" >> $GITHUB_ENV
      
      # Update Firestore with build information
      - name: Update Firestore
        if: ${{ github.event.inputs.build_id != '' || github.event.client_payload.build_id != '' }}
        run: |
          echo "Updating Firestore document for build $BUILD_ID..."
          
          firebase firestore:set builds/$BUILD_ID --data '{
            "status": "completed",
            "completedAt": "'$(date -u +"%Y-%m-%dT%H:%M:%SZ")'",
            "apkUrl": "'$APK_URL'",
            "aabUrl": "'$AAB_URL'",
            "buildPath": "'$BUILD_PATH'"
          }'

      # Upload artifacts to GitHub Actions for backup
      - name: Upload Artifacts (Backup)
        uses: actions/upload-artifact@v4
        with:
          name: android-build-${{ env.BUILD_ID }}
          path: |
            build/app/outputs/flutter-apk/app-release.apk
            build/app/outputs/bundle/release/app-release.aab
          retention-days: 7