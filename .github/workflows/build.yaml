name: Android Build

on:
  pull_request:
    branches: [main, dev]
  push:
    branches: [main, dev]
  workflow_dispatch:
    inputs:
      url:
        description: 'Website URL to load in WebView'
        required: false
        default: 'https://flutter.dev'
      app_name:
        description: 'Application display name'
        required: false
        default: 'WebView App'
      build_id:
        description: 'Build ID for tracking in Firestore'
        required: false
        default: ''
  repository_dispatch:
    types: [build-android-request]

jobs:
  build-android:
    runs-on: ubuntu-latest
    env:
      FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
      BUILD_ID: ${{ github.event.inputs.build_id || github.event.client_payload.build_id || github.run_id }}

    steps:
      - name: Clone repository
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: "17.x"

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          flutter-version: '3.29.2'
          cache: true

      - name: Get Flutter packages
        run: flutter pub get

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}

      - name: Build Android APK and App Bundle
        run: |
          flutter clean
          
          APP_NAME="${{ github.event.inputs.app_name || github.event.client_payload.app_name || 'WebView App' }}"
          WEBVIEW_URL="${{ github.event.inputs.url || github.event.client_payload.url || 'https://flutter.dev' }}"
          
          echo "Building with APP_NAME: $APP_NAME"
          echo "Building with WEBVIEW_URL: $WEBVIEW_URL"
         
          ESCAPED_APP_NAME=$(echo "$APP_NAME" | sed 's/[\/&]/\\&/g')
          sed -i "s/<string name=\"app_name\">.*<\/string>/<string name=\"app_name\">$ESCAPED_APP_NAME<\/string>/g" android/app/src/main/res/values/strings.xml
          
          flutter build apk --release \
            --dart-define=APP_NAME="$APP_NAME" \
            --dart-define=WEBVIEW_URL="$WEBVIEW_URL"
          
          flutter build appbundle --release \
            --dart-define=APP_NAME="$APP_NAME" \
            --dart-define=WEBVIEW_URL="$WEBVIEW_URL"

      # Setup Python for Firebase uploads
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          
      # Install required Python packages
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install firebase-admin

      # Upload APK and AAB to Firebase Storage using Python script
      - name: Upload to Firebase Storage
        if: success()
        env:
          FIREBASE_SERVICE_ACCOUNT_BASE64: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_BASE64 }}
        run: |
          echo "Uploading artifacts to Firebase Storage..."
          python scripts/upload_to_firebase.py
          
      # Update Firestore with build information
      - name: Update Firestore
        if: env.BUILD_ID != '' && env.APK_URL != ''
        env:
          FIREBASE_SERVICE_ACCOUNT_BASE64: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_BASE64 }}
        run: |
          echo "Updating Firestore document for build $BUILD_ID..."
          
          # Create a Python script to update Firestore
          cat > /tmp/update_firestore.py << EOL
#!/usr/bin/env python3
import os
import sys
import firebase_admin
from firebase_admin import credentials, firestore
import base64
import datetime

# Get parameters from environment
firebase_project_id = os.environ.get('FIREBASE_PROJECT_ID')
service_account_base64 = os.environ.get('FIREBASE_SERVICE_ACCOUNT_BASE64')
build_id = os.environ.get('BUILD_ID')
apk_url = os.environ.get('APK_URL')
aab_url = os.environ.get('AAB_URL')
build_path = os.environ.get('BUILD_PATH')

# Validate parameters
if not all([firebase_project_id, service_account_base64, build_id, apk_url, aab_url, build_path]):
    print("Error: Missing required environment variables.")
    sys.exit(1)

# Decode the base64 service account key
service_account_json = base64.b64decode(service_account_base64)

# Save the service account key to a temporary file
temp_key_path = "/tmp/firebase-service-account.json"
with open(temp_key_path, 'wb') as f:
    f.write(service_account_json)

try:
    # Initialize Firebase app
    cred = credentials.Certificate(temp_key_path)
    if not firebase_admin._apps:
        firebase_admin.initialize_app(cred)
    
    db = firestore.client()
    
    # Update Firestore with build information
    data = {
        'status': 'completed',
        'completedAt': datetime.datetime.utcnow().isoformat() + 'Z',
        'apkUrl': apk_url,
        'aabUrl': aab_url,
        'buildPath': build_path
    }
    
    db.collection('builds').document(build_id).set(data)
    print(f"Firestore document updated: builds/{build_id}")
    
    # Clean up
    os.remove(temp_key_path)
    sys.exit(0)
    
except Exception as e:
    print(f"Error: {e}")
    # Clean up in case of error
    if os.path.exists(temp_key_path):
        os.remove(temp_key_path)
    sys.exit(1)
EOL
          
          # Make the script executable and run it
          chmod +x /tmp/update_firestore.py
          python /tmp/update_firestore.py

      # Upload artifacts to GitHub Actions for backup
      - name: Upload Artifacts (Backup)
        uses: actions/upload-artifact@v4
        with:
          name: android-build-${{ env.BUILD_ID }}
          path: |
            build/app/outputs/flutter-apk/app-release.apk
            build/app/outputs/bundle/release/app-release.aab
          retention-days: 7